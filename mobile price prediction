import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Generate synthetic mobile phone data
np.random.seed(0)
n_samples = 100
brand = np.random.choice(['Apple', 'Samsung', 'Google'], n_samples)
ram = np.random.choice([4, 8, 16], n_samples)
camera_quality = np.random.choice([12, 16, 20], n_samples)
screen_size = np.random.uniform(5.0, 6.5, n_samples)
battery_capacity = np.random.uniform(2500, 4500, n_samples)
price = 500 + 100 * ram + 50 * camera_quality + 20 * screen_size + 5 * battery_capacity + np.random.normal(0, 100, n_samples)

# Create a DataFrame from the generated data
data = pd.DataFrame({
    'Brand': brand,
    'RAM (GB)': ram,
    'Camera Quality (MP)': camera_quality,
    'Screen Size (inches)': screen_size,
    'Battery Capacity (mAh)': battery_capacity,
    'Price': price
})

# Perform one-hot encoding for the 'Brand' column
data = pd.get_dummies(data, columns=['Brand'], drop_first=True)

# Split the data into features (X) and the target variable (y)
X = data.drop('Price', axis=1)  # Features (excluding the 'Price' column)
y = data['Price']  # Target variable (mobile phone prices)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Linear Regression model
lr_model = LinearRegression()

# Train the model on the training data
lr_model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = lr_model.predict(X_test)

# Calculate Mean Squared Error and R-squared (coefficient of determination)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)
