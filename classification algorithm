import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix
import itertools  # Import itertools

# Load the Iris dataset from scikit-learn
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create classifiers: Logistic Regression, Random Forest, and SVM
lr_classifier = LogisticRegression()
rf_classifier = RandomForestClassifier()
svm_classifier = SVC()

# Train the classifiers on the training data
lr_classifier.fit(X_train, y_train)
rf_classifier.fit(X_train, y_train)
svm_classifier.fit(X_train, y_train)

# Make predictions on the testing data
lr_pred = lr_classifier.predict(X_test)
rf_pred = rf_classifier.predict(X_test)
svm_pred = svm_classifier.predict(X_test)

# Calculate accuracy for each classifier
lr_accuracy = accuracy_score(y_test, lr_pred)
rf_accuracy = accuracy_score(y_test, rf_pred)
svm_accuracy = accuracy_score(y_test, svm_pred)

# Display accuracy scores
print("Logistic Regression Accuracy:", lr_accuracy)
print("Random Forest Accuracy:", rf_accuracy)
print("SVM Accuracy:", svm_accuracy)

# Plot confusion matrices using matplotlib
def plot_confusion_matrix(cm, classes, title):
    plt.figure()
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.tight_layout()

class_names = iris.target_names
for idx, classifier in enumerate([lr_pred, rf_pred, svm_pred]):
    cm = confusion_matrix(y_test, classifier)
    plot_confusion_matrix(cm, classes=class_names, title=f'Confusion Matrix for {class_names[idx]}')

plt.show()
